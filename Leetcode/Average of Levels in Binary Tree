/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
#include<queue> 
#define append push_back
using namespace std;
class Solution {
public:
    vector<double> averageOfLevels(TreeNode* root) {
          
        vector<double> rs;
        queue< pair<TreeNode *,int>> q;
        q.push({root,0});
        rs.append(root->val*1.0);
        while(!q.empty()){
            double sm=0;
            int sz=q.size();
         int szl=0;
            
            for(int i=0;i<sz;i++){
                auto it = q.front();
                TreeNode* nw=it.first;
                int l=it.second;
                q.pop();
        
                if(nw->left){
                   sm+=(nw->left->val)*1.0;
                   szl+=1;
                    q.push({nw->left, l+1});
                }
                if(nw->right){
                   sm+=(nw->right->val)*1.0;
                   szl+=1;

                    q.push({nw->right, l+1});
                }
                
                
            }
            if(szl)
            rs.append(sm/szl);
        }
        return rs;
    }
};
