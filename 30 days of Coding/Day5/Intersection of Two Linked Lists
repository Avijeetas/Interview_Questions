/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        ListNode* x1=headA;
        ListNode* x2=headB; 
        ListNode* ans=NULL;
        while(x1)
        {
            while(x2!=NULL and x1!=x2)
                x2=x2->next;
            if(x2==NULL)
                x2=headB;
            else if(x2==x1)
            {
                ans=x2;
                break;
            }
            x1=x1->next;
        }
        return ans;
    }
};


// More Efficient
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    int node(ListNode *x)
    {
        int c=0;
        while(x)
            c++,x=x->next;
        return c;
    }
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
  int cA = 0, cB = 0;
        
        cA=node(headA);
        cB=node(headB);
            
        ListNode * tempA = headA;
        ListNode * tempB = headB;
        
        
        while(cA > cB && tempA) {
            tempA = tempA->next;
            cA--;
        }
        
        while(cB > cA && tempB) {
            tempB = tempB->next;
            cB--;
        }
        
        while(tempA && tempB) {
            if (tempA == tempB) {
                return tempA;
            } else {
                tempA = tempA->next;
                tempB = tempB->next;
            }
        }
        return tempA;
          }
};
